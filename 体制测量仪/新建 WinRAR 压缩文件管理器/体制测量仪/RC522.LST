C51 COMPILER V9.52.0.0   RC522                                                             07/27/2015 21:53:13 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE RC522
OBJECT MODULE PLACED IN RC522.OBJ
COMPILER INVOKED BY: C:\Program Files\keil\C51\BIN\C51.EXE RC522.C BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <intrins.h>
   2          #include "reg52.h"
   3          #include "main.h"
   4          #include "mfrc522.h"
   5          #include <string.h> 
   6          #define MAXRLEN 18
   7          sfr   RCAP2LH =   0xCA;
   8          sfr   T2LH    =   0xCC;                        
   9          /////////////////////////////////////////////////////////////////////
  10          //功    能：寻卡
  11          //参数说明: req_code[IN]:寻卡方式
  12          //                0x52 = 寻感应区内所有符合14443A标准的卡
  13          //                0x26 = 寻未进入休眠状态的卡
  14          //          pTagType[OUT]：卡片类型代码
  15          //                0x4400 = Mifare_UltraLight
  16          //                0x0400 = Mifare_One(S50)
  17          //                0x0200 = Mifare_One(S70)
  18          //                0x0800 = Mifare_Pro(X)
  19          //                0x4403 = Mifare_DESFire
  20          //返    回: 成功返回MI_OK
  21          /////////////////////////////////////////////////////////////////////
  22          char PcdRequest(unsigned char req_code,unsigned char *pTagType)
  23          {
  24   1         char status;  
  25   1         unsigned int  unLen;
  26   1         unsigned char ucComMF522Buf[MAXRLEN]; 
  27   1         ClearBitMask(Status2Reg,0x08);
  28   1         WriteRawRC(BitFramingReg,0x07);
  29   1         SetBitMask(TxControlReg,0x03);
  30   1         ucComMF522Buf[0] = req_code;
  31   1         status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,1,ucComMF522Buf,&unLen);
  32   1         if ((status == MI_OK) && (unLen == 0x10))
  33   1         {    
  34   2             *pTagType     = ucComMF522Buf[0];
  35   2             *(pTagType+1) = ucComMF522Buf[1];
  36   2         }
  37   1         else
  38   1         {   status = MI_ERR;   }   
  39   1         return status;
  40   1      }
  41          
  42          /////////////////////////////////////////////////////////////////////
  43          //功    能：防冲撞
  44          //参数说明: pSnr[OUT]:卡片序列号，4字节
  45          //返    回: 成功返回MI_OK
  46          /////////////////////////////////////////////////////////////////////  
  47          char PcdAnticoll(unsigned char *pSnr)
  48          {
  49   1          char status;
  50   1          unsigned char i,snr_check=0;
  51   1          unsigned int  unLen;
  52   1          unsigned char ucComMF522Buf[MAXRLEN]; 
  53   1          
  54   1      
  55   1          ClearBitMask(Status2Reg,0x08);
C51 COMPILER V9.52.0.0   RC522                                                             07/27/2015 21:53:13 PAGE 2   

  56   1          WriteRawRC(BitFramingReg,0x00);
  57   1          ClearBitMask(CollReg,0x80);
  58   1       
  59   1          ucComMF522Buf[0] = PICC_ANTICOLL1;
  60   1          ucComMF522Buf[1] = 0x20;
  61   1      
  62   1          status = PcdComMF522(PCD_TRANSCEIVE,ucComMF522Buf,2,ucComMF522Buf,&unLen);
  63   1      
  64   1          if (status == MI_OK)
  65   1          {
  66   2             for (i=0; i<4; i++)
  67   2               {   
  68   3                   *(pSnr+i)  = ucComMF522Buf[i];
  69   3                   snr_check ^= ucComMF522Buf[i];
  70   3               }
  71   2               if (snr_check != ucComMF522Buf[i])
  72   2               {   status = MI_ERR;    }
  73   2          }
  74   1          
  75   1          SetBitMask(CollReg,0x80);
  76   1          return status;
  77   1      }
  78          
  79          /////////////////////////////////////////////////////////////////////
  80          //功    能：复位RC522
  81          //返    回: 成功返回MI_OK
  82          /////////////////////////////////////////////////////////////////////
  83          char PcdReset(void)
  84          {
  85   1          MF522_RST=1;
  86   1          _nop_();
  87   1          MF522_RST=0;
  88   1          _nop_();
  89   1          MF522_RST=1;
  90   1           _nop_();
  91   1          WriteRawRC(CommandReg,PCD_RESETPHASE);
  92   1          _nop_();
  93   1          
  94   1          WriteRawRC(ModeReg,0x3D);            //和Mifare卡通讯，CRC初始值0x6363
  95   1          WriteRawRC(TReloadRegL,30);           
  96   1          WriteRawRC(TReloadRegH,0);
  97   1          WriteRawRC(TModeReg,0x8D);
  98   1          WriteRawRC(TPrescalerReg,0x3E);
  99   1          WriteRawRC(TxAutoReg,0x40);     
 100   1          return MI_OK;
 101   1      }
 102          //////////////////////////////////////////////////////////////////////
 103          //设置RC632的工作方式 
 104          //////////////////////////////////////////////////////////////////////
 105          char M500PcdConfigISOType(unsigned char type)
 106          {
 107   1         if (type == 'A')                     //ISO14443_A
 108   1         { 
 109   2             ClearBitMask(Status2Reg,0x08);
 110   2             WriteRawRC(ModeReg,0x3D);//3
 111   2             WriteRawRC(RxSelReg,0x86);//
 112   2             WriteRawRC(RFCfgReg,0x7F);   //4F
 113   2             WriteRawRC(TReloadRegL,30);//tmoLength);// TReloadVal = 'h6a =tmoLength(dec) 
 114   2           WriteRawRC(TReloadRegH,0);
 115   2             WriteRawRC(TModeReg,0x8D);
 116   2           WriteRawRC(TPrescalerReg,0x3E);
 117   2            delay_10ms(1);
C51 COMPILER V9.52.0.0   RC522                                                             07/27/2015 21:53:13 PAGE 3   

 118   2             PcdAntennaOn();
 119   2         }
 120   1         else{ return -1; }
 121   1         
 122   1         return MI_OK;
 123   1      }
 124          /////////////////////////////////////////////////////////////////////
 125          //功    能：读RC632寄存器
 126          //参数说明：Address[IN]:寄存器地址
 127          //返    回：读出的值
 128          /////////////////////////////////////////////////////////////////////
 129          unsigned char ReadRawRC(unsigned char Address)
 130          {
 131   1           unsigned char i, ucAddr;
 132   1           unsigned char ucResult=0;
 133   1      
 134   1           MF522_SCK = 0;
 135   1           MF522_NSS = 0;
 136   1           ucAddr = ((Address<<1)&0x7E)|0x80;
 137   1      
 138   1           for(i=8;i>0;i--)
 139   1           {
 140   2               MF522_SI = ((ucAddr&0x80)==0x80);
 141   2               MF522_SCK = 1;
 142   2               ucAddr <<= 1;
 143   2               MF522_SCK = 0;
 144   2           }
 145   1      
 146   1           for(i=8;i>0;i--)
 147   1           {
 148   2               MF522_SCK = 1;
 149   2               ucResult <<= 1;
 150   2               ucResult|=(bit)MF522_SO;
 151   2               MF522_SCK = 0;
 152   2           }
 153   1      
 154   1           MF522_NSS = 1;
 155   1           MF522_SCK = 1;
 156   1           return ucResult;
 157   1      } 
 158          
 159          /////////////////////////////////////////////////////////////////////
 160          //功    能：写RC632寄存器
 161          //参数说明：Address[IN]:寄存器地址
 162          //          value[IN]:写入的值
 163          /////////////////////////////////////////////////////////////////////
 164          void WriteRawRC(unsigned char Address, unsigned char value)
 165          {  
 166   1          unsigned char i, ucAddr;
 167   1      
 168   1          MF522_SCK = 0;
 169   1          MF522_NSS = 0;
 170   1          ucAddr = ((Address<<1)&0x7E);
 171   1      
 172   1          for(i=8;i>0;i--)
 173   1          {
 174   2              MF522_SI = ((ucAddr&0x80)==0x80);
 175   2              MF522_SCK = 1;
 176   2              ucAddr <<= 1;
 177   2              MF522_SCK = 0;
 178   2          }
 179   1      
C51 COMPILER V9.52.0.0   RC522                                                             07/27/2015 21:53:13 PAGE 4   

 180   1          for(i=8;i>0;i--)
 181   1          {
 182   2              MF522_SI = ((value&0x80)==0x80);
 183   2              MF522_SCK = 1;
 184   2              value <<= 1;
 185   2              MF522_SCK = 0;
 186   2          }
 187   1          MF522_NSS = 1;
 188   1          MF522_SCK = 1;
 189   1      }
 190          
 191          /////////////////////////////////////////////////////////////////////
 192          //功    能：置RC522寄存器位
 193          //参数说明：reg[IN]:寄存器地址
 194          //          mask[IN]:置位值
 195          /////////////////////////////////////////////////////////////////////
 196          void SetBitMask(unsigned char reg,unsigned char mask)  
 197          {
 198   1          char tmp = 0x0;
 199   1          tmp = ReadRawRC(reg);
 200   1          WriteRawRC(reg,tmp | mask);  // set bit mask
 201   1      }
 202          
 203          /////////////////////////////////////////////////////////////////////
 204          //功    能：清RC522寄存器位
 205          //参数说明：reg[IN]:寄存器地址
 206          //          mask[IN]:清位值
 207          /////////////////////////////////////////////////////////////////////
 208          void ClearBitMask(unsigned char reg,unsigned char mask)  
 209          {
 210   1          char tmp = 0x0;
 211   1          tmp = ReadRawRC(reg);
 212   1          WriteRawRC(reg, tmp & ~mask);  // clear bit mask
 213   1      }
 214          
 215          /////////////////////////////////////////////////////////////////////
 216          //功    能：通过RC522和ISO14443卡通讯
 217          //参数说明：Command[IN]:RC522命令字
 218          //          pInData[IN]:通过RC522发送到卡片的数据
 219          //          InLenByte[IN]:发送数据的字节长度
 220          //          pOutData[OUT]:接收到的卡片返回数据
 221          //          *pOutLenBit[OUT]:返回数据的位长度
 222          /////////////////////////////////////////////////////////////////////
 223          char PcdComMF522(unsigned char Command, 
 224                           unsigned char *pInData, 
 225                           unsigned char InLenByte,
 226                           unsigned char *pOutData, 
 227                           unsigned int  *pOutLenBit)
 228          {
 229   1          char status = MI_ERR;
 230   1          unsigned char irqEn   = 0x00;
 231   1          unsigned char waitFor = 0x00;
 232   1          unsigned char lastBits;
 233   1          unsigned char n;
 234   1          unsigned int i;
 235   1          switch (Command)
 236   1          {
 237   2             case PCD_AUTHENT:
 238   2                irqEn   = 0x12;
 239   2                waitFor = 0x10;
 240   2                break;
 241   2             case PCD_TRANSCEIVE:
C51 COMPILER V9.52.0.0   RC522                                                             07/27/2015 21:53:13 PAGE 5   

 242   2                irqEn   = 0x77;
 243   2                waitFor = 0x30;
 244   2                break;
 245   2             default:
 246   2               break;
 247   2          }
 248   1         
 249   1          WriteRawRC(ComIEnReg,irqEn|0x80);
 250   1          ClearBitMask(ComIrqReg,0x80);
 251   1          WriteRawRC(CommandReg,PCD_IDLE);
 252   1          SetBitMask(FIFOLevelReg,0x80);
 253   1          
 254   1          for (i=0; i<InLenByte; i++)
 255   1          {   WriteRawRC(FIFODataReg, pInData[i]);    }
 256   1          WriteRawRC(CommandReg, Command);
 257   1         
 258   1          
 259   1          if (Command == PCD_TRANSCEIVE)
 260   1          {    SetBitMask(BitFramingReg,0x80);  }
 261   1          
 262   1      //    i = 600;//根据时钟频率调整，操作M1卡最大等待时间25ms
 263   1       i = 2000;
 264   1          do 
 265   1          {
 266   2               n = ReadRawRC(ComIrqReg);
 267   2               i--;
 268   2          }
 269   1          while ((i!=0) && !(n&0x01) && !(n&waitFor));
 270   1          ClearBitMask(BitFramingReg,0x80);
 271   1              
 272   1          if (i!=0)
 273   1          {    
 274   2               if(!(ReadRawRC(ErrorReg)&0x1B))
 275   2               {
 276   3                   status = MI_OK;
 277   3                   if (n & irqEn & 0x01)
 278   3                   {   status = MI_NOTAGERR;   }
 279   3                   if (Command == PCD_TRANSCEIVE)
 280   3                   {
 281   4                      n = ReadRawRC(FIFOLevelReg);
 282   4                      lastBits = ReadRawRC(ControlReg) & 0x07;
 283   4                      if (lastBits)
 284   4                      {   *pOutLenBit = (n-1)*8 + lastBits;   }
 285   4                      else
 286   4                      {   *pOutLenBit = n*8;   }
 287   4                      if (n == 0)
 288   4                      {   n = 1;    }
 289   4                      if (n > MAXRLEN)
 290   4                      {   n = MAXRLEN;   }
 291   4                      for (i=0; i<n; i++)
 292   4                      {   pOutData[i] = ReadRawRC(FIFODataReg);    }
 293   4                  }
 294   3               }
 295   2               else
 296   2               {   status = MI_ERR;   }
 297   2              
 298   2         }
 299   1         
 300   1      
 301   1         SetBitMask(ControlReg,0x80);           // stop timer now
 302   1         WriteRawRC(CommandReg,PCD_IDLE); 
 303   1         return status;
C51 COMPILER V9.52.0.0   RC522                                                             07/27/2015 21:53:13 PAGE 6   

 304   1      }
 305          
 306          
 307          /////////////////////////////////////////////////////////////////////
 308          //开启天线  
 309          //每次启动或关闭天险发射之间应至少有1ms的间隔
 310          /////////////////////////////////////////////////////////////////////
 311          void PcdAntennaOn()
 312          {
 313   1          unsigned char i;
 314   1          i = ReadRawRC(TxControlReg);
 315   1          if (!(i & 0x03))
 316   1          {
 317   2              SetBitMask(TxControlReg, 0x03);
 318   2          }
 319   1      }
 320          
 321          
 322          /////////////////////////////////////////////////////////////////////
 323          //关闭天线
 324          /////////////////////////////////////////////////////////////////////
 325          void PcdAntennaOff()
 326          {
 327   1          ClearBitMask(TxControlReg, 0x03);
 328   1      }
 329          
 330          ///////////////////////////////////////////////////////////////////////
 331          // Delay 10ms
 332          ///////////////////////////////////////////////////////////////////////
 333          void delay_10ms(unsigned int _10ms)
 334          {
 335   1      #ifndef NO_TIMER2
 336   1          RCAP2LH = RCAP2_10ms;
 337   1          T2LH    = RCAP2_10ms;
 338   1          
 339   1          TR2 = TRUE;
 340   1          while (_10ms--)
 341   1          {
 342   2            while (!TF2);
 343   2            TF2 = FALSE;
 344   2          }
 345   1          TR2 = FALSE;
 346   1      #else
                  while (_10ms--)
                  {
                    delay_50us(19);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid )
                        return;
                    delay_50us(20);
                    if (CmdValid)
C51 COMPILER V9.52.0.0   RC522                                                             07/27/2015 21:53:13 PAGE 7   

                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(20);
                    if (CmdValid)
                        return;
                    delay_50us(19);
                    if (CmdValid)
                        return;
                  }
              #endif
 381   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    948    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      66
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
